package controllers.EspaceSportif;

import javafx.beans.property.SimpleFloatProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;
import javafx.util.Callback;
import models.EspaceSportif.EspaceSportif;
import services.EspaceSportif.EspaceSportifService;

import java.io.IOException;
import java.util.List;

public class AffichageEspace {

    @FXML
    private TableView<EspaceSportif> tableView;

    @FXML
    private TableColumn<EspaceSportif, Integer> colId;

    @FXML
    private TableColumn<EspaceSportif, String> colNom;

    @FXML
    private TableColumn<EspaceSportif, String> colAdresse;

    @FXML
    private TableColumn<EspaceSportif, String> colCategorie;

    @FXML
    private TableColumn<EspaceSportif, Float> colCapacite;

    @FXML
    private TableColumn<EspaceSportif, String> colActions;

    // Nouvelles colonnes pour afficher les coordonnées et le climat
    @FXML
    private TableColumn<EspaceSportif, String> colCoordonnees;

    @FXML
    private TableColumn<EspaceSportif, String> colClimat;

    @FXML
    private TextField searchField;

    private final EspaceSportifService espaceService;

    public AffichageEspace() {
        this.espaceService = new EspaceSportifService();
    }

    @FXML
    public void initialize() {
        if (tableView == null || colNom == null || colCoordonnees == null || colClimat == null) {
            System.err.println("⚠ Erreur : Vérifie ton fichier FXML ! Les éléments n'ont pas été correctement injectés.");
            return;
        }

        // Configuration des colonnes existantes
        colId.setCellValueFactory(cellData -> new SimpleIntegerProperty(cellData.getValue().getIdLieu()).asObject());
        colNom.setCellValueFactory(cellData -> new SimpleStringProperty(cellData.getValue().getNomEspace()));
        colAdresse.setCellValueFactory(cellData -> new SimpleStringProperty(cellData.getValue().getAdresse()));
        colCategorie.setCellValueFactory(cellData -> new SimpleStringProperty(cellData.getValue().getCategorie()));
        colCapacite.setCellValueFactory(cellData -> new SimpleFloatProperty(cellData.getValue().getCapacite()).asObject());

        // Configuration des nouvelles colonnes
        colCoordonnees.setCellValueFactory(cellData -> {
            try {
                double[] coords = espaceService.getCoordonnes(cellData.getValue().getAdresse());
                return new SimpleStringProperty(coords != null ? coords[0] + ", " + coords[1] : "N/A");
            } catch (IOException e) {
                System.err.println("Erreur lors de la récupération des coordonnées : " + e.getMessage());
                return new SimpleStringProperty("Erreur");
            }
        });

        colClimat.setCellValueFactory(cellData -> {
            try {
                double[] coords = espaceService.getCoordonnes(cellData.getValue().getAdresse());
                if (coords != null) {
                    String climat = espaceService.getClimat(coords[0], coords[1]);
                    return new SimpleStringProperty(climat != null ? climat : "N/A");
                }
                return new SimpleStringProperty("N/A");
            } catch (IOException e) {
                System.err.println("Erreur lors de la récupération du climat : " + e.getMessage());
                return new SimpleStringProperty("Erreur");
            }
        });

        // Ajout de la colonne Actions
        addActionsColumn();
        loadEspaces();

        // Listener pour la recherche dynamique
        searchField.textProperty().addListener((observable, oldValue, newValue) -> searchEspaceSportif(newValue));
    }

    private void loadEspaces() {
        List<EspaceSportif> espaces = espaceService.rechercher();
        if (espaces == null || espaces.isEmpty()) {
            System.err.println("⚠ Aucun espace sportif trouvé !");
            tableView.setItems(FXCollections.observableArrayList());
        } else {
            tableView.setItems(FXCollections.observableArrayList(espaces));
        }
    }

    private void addActionsColumn() {
        colActions.setCellValueFactory(cellData -> new SimpleStringProperty("Actions"));

        colActions.setCellFactory(param -> new TableCell<>() {
            final Button editButton = new Button("Modifier");
            final Button deleteButton = new Button("Supprimer");
            final HBox hBox = new HBox(10, editButton, deleteButton);

            {
                editButton.setOnAction(event -> handleEdit(getTableRow().getItem()));
                deleteButton.setOnAction(event -> handleDelete(getTableRow().getItem()));
            }

            @Override
            public void updateItem(String item, boolean empty) {
                super.updateItem(item, empty);
                setGraphic(empty ? null : hBox);
            }
        });
    }

    private void handleEdit(EspaceSportif espace) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/ModifierEspace.fxml"));
            AnchorPane modifLayout = loader.load();
            ModifierEspace controller = loader.getController();
            controller.setEspaceToEdit(espace);

            Stage currentStage = (Stage) tableView.getScene().getWindow();
            currentStage.close();

            Stage newStage = new Stage();
            newStage.setScene(new Scene(modifLayout));
            newStage.setTitle("Modifier un espace sportif");
            newStage.show();
        } catch (IOException e) {
            e.printStackTrace();
            System.err.println("Erreur lors du chargement de ModifierEspace.fxml");
        }
    }

    private void handleDelete(EspaceSportif espace) {
        if (espace == null) return;

        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setTitle("Confirmation de suppression");
        alert.setHeaderText("Supprimer l'espace sportif");
        alert.setContentText("Êtes-vous sûr de vouloir supprimer \"" + espace.getNomEspace() + "\" ?");

        ButtonType buttonYes = new ButtonType("Oui", ButtonBar.ButtonData.YES);
        ButtonType buttonNo = new ButtonType("Non", ButtonBar.ButtonData.NO);
        alert.getButtonTypes().setAll(buttonYes, buttonNo);

        alert.showAndWait().ifPresent(response -> {
            if (response == buttonYes) {
                espaceService.supprimer(espace);
                loadEspaces();
            }
        });
    }

    @FXML
    private void addEspace() {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/AjouterEspace.fxml"));
            AnchorPane ajoutLayout = loader.load();

            Stage currentStage = (Stage) tableView.getScene().getWindow();
            currentStage.close();

            Stage newStage = new Stage();
            newStage.setScene(new Scene(ajoutLayout));
            newStage.setTitle("Ajouter un espace sportif");
            newStage.show();
        } catch (IOException e) {
            e.printStackTrace();
            System.err.println("Erreur lors du chargement de AjouterEspace.fxml");
        }
    }

    @FXML
    private void refreshList() {
        loadEspaces();
    }

    private void searchEspaceSportif(String motCle) {
        List<EspaceSportif> resultatRecherche = espaceService.rechercherParMotCle(motCle.toLowerCase());
        tableView.setItems(FXCollections.observableArrayList(resultatRecherche));
    }

    @FXML
    private void goToEspaceSportif(ActionEvent event) throws IOException {
        FXMLLoader loader = new FXMLLoader(getClass().getResource("/AffichageEspace.fxml"));
        AnchorPane espaceSportifLayout = loader.load();
        Scene scene = new Scene(espaceSportifLayout);
        Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
        stage.setScene(scene);
        stage.show();
    }

    @FXML
    private void goToReservation(ActionEvent event) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/AffichageReservation.fxml"));
            AnchorPane reservationLayout = loader.load();
            Scene reservationScene = new Scene(reservationLayout);
            Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();
            currentStage.setScene(reservationScene);
            currentStage.show();
        } catch (IOException e) {
            e.printStackTrace();
            System.err.println("Erreur lors du chargement de Reservation.fxml");
        }
    }

    @FXML
    public void goToAbonnement(ActionEvent actionEvent) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/AffichageAbonnement.fxml"));
            Parent root = loader.load();
            Stage stage = (Stage) tableView.getScene().getWindow();
            stage.setScene(new Scene(root));
            stage.setTitle("Liste des Abonnements");
        } catch (IOException e) {
            e.printStackTrace();
            System.err.println("Erreur lors du chargement des Abonnements.fxml");
        }
    }
}